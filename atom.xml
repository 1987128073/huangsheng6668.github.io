<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>糖池</title>
  
  <subtitle>小爬虫滴滴的跑，反爬见了拼命的追~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-14T08:53:53.666Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>juziss</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python基础篇</title>
    <link href="http://yoursite.com/2020/03/14/Python%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://yoursite.com/2020/03/14/Python%E5%9F%BA%E7%A1%80%E7%AF%87/</id>
    <published>2020-03-14T07:55:57.000Z</published>
    <updated>2020-03-14T08:53:53.666Z</updated>
    
    <content type="html"><![CDATA[<h4 id="列表（list）："><a href="#列表（list）：" class="headerlink" title="列表（list）："></a>列表（list）：</h4><h5 id="列表里的类型："><a href="#列表里的类型：" class="headerlink" title="列表里的类型："></a>列表里的类型：</h5><ul><li><strong>列表里的类型可以是任意的</strong></li><li><strong>列表的基本单位是元素</strong></li><li><strong>列表是动态的，它的长度是可变的，理论上容量是无限大！！！</strong></li><li><strong>list有2种特殊的生成方式,一种是list(range(num)),一种是[i for i in range(num)]，其中[i for i in range(num)]可变形为[m+n for m in [任意类型数据] for n in 任意类型数据]</strong><br><img src="en-resource://database/1156:1" alt="4e1d005644a9b58d25fb08bffc8a2b3c.png"></li></ul><ul><li><strong>列表不像数组一样，只能存放一种数据类型，如[‘小明’, 17, 1.0]是可以这样存储的</strong></li><li><strong>列表可以由多个小列表组成，我们想从中取出这些列表，需要借助切片。使用切片取出来的值还是个切片，所以说一个列表可以由多个列表组成！！！</strong></li><li><strong>列表的偏移量是可以为负值的，不管负数是多少，最终都指向最后一个元素。</strong></li></ul><p><strong>切片的写法：</strong></p><pre><code>1. list[:] : 从0取值到最后一个元素2. list[:2] : 从0取到1共两个元素3. list[:-1]:从0取到最后，结果跟第一个相同4.list[:-1:2]:从0取到最后，每两个取一个，也就是步幅为2，如图：</code></pre><p><img src="https://s1.ax1x.com/2020/03/14/8Q2fot.png" alt="8Q2fot.png">    </p><pre><code>切片的口决：左右空，取到头；左要取，右不取。意思是如上的写法，左闭右开，冒号左边的元素开始取值，直到冒号右边的偏移量-1的位置。</code></pre><h4 id="特别标注！！！！字符串也是能使用切片的，比如下图的去空操作，返回的是一个字符串："><a href="#特别标注！！！！字符串也是能使用切片的，比如下图的去空操作，返回的是一个字符串：" class="headerlink" title="特别标注！！！！字符串也是能使用切片的，比如下图的去空操作，返回的是一个字符串："></a>特别标注！！！！字符串也是能使用切片的，比如下图的去空操作，返回的是一个字符串：</h4><p><img src="https://s1.ax1x.com/2020/03/14/8Q2zWT.png" alt="8Q2zWT.png">    </p><h4 id="列表的基本操作："><a href="#列表的基本操作：" class="headerlink" title="列表的基本操作："></a>列表的基本操作：</h4><ul><li><strong>增加一个元素到列表末尾的位置：list.append(),作用跟栈的增加一个元素是一个意思。注意：append（）括号里面只能接受一个参数，参数可以是个对象，列表，字典，这些参数的内部可以是多个，但是append()括号里面只能写一个参数，参数里面可以包含其他参数，如 list.append([1,2])，list.append是没有返回值的，比如下图</strong><br><img src="https://s1.ax1x.com/2020/03/14/8Qhg9P.png" alt="8Qhg9P.png"></li><li><p>根据索引使用del()删除一个列表元素,<br>del 列表名[元素的索引],<strong>注意是中括号！！！！</strong>，具体使用如图，这里踩过坑：<br><img src="https://s1.ax1x.com/2020/03/14/8Qh6ht.png" alt="8Qh6ht.png"></p></li><li><p>使用pop()弹出栈，并返回弹出的值如：<br>students = [1,2,3]<br>int i = students.pop()<br>i == 3,与<strong>Java不同的是pop()函数括号内可以指定弹出数的下标</strong></p></li><li><p><strong>list1.extend(list2)将两个list合并起来，也可以直接把两个list加起来如list3 = list1 + list2</strong>如图：<br><img src="https://s1.ax1x.com/2020/03/14/8Qhhng.png" alt="8Qhhng.png"><br><strong>extend()括号里面是字符串时，字符串里的每个字符将被拆分出来组成一个列表并跟原list拼接，如果是list则直接拼接</strong></p></li><li><p>sorted()与sort()排序<br><strong>sorted(list)返回一个排序好的list的副本，原list没有发生变化,而list.sort()是会改变原list</strong><br><img src="https://s1.ax1x.com/2020/03/14/8Qh4BQ.png" alt="8Qh4BQ.png"></p></li></ul><h4 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典(dict)"></a>字典(dict)</h4><p>   <strong>字典是由一个个键值对构成的，每一个键值对算一个长度。如下图：</strong></p><h2 id=""><a href="#" class="headerlink" title="  "></a><img src="https://s1.ax1x.com/2020/03/14/8Qh57j.png" alt="8Qh57j.png">  </h2><h4 id="字典的值的提取方法"><a href="#字典的值的提取方法" class="headerlink" title="字典的值的提取方法"></a>字典的值的提取方法</h4><ul><li><strong>字典的键具有唯一性，而值是可以重复的。提取值的方式为“字典名[‘键名’]”</strong></li><li><strong>使用get(‘键名’,’默认值’)的方法提取值，当键名不存在时，返回默认值</strong></li><li>使用setDefault(键名,默认值)获取字典值，倘若不存在该键值对，则会创建值为设置的默认值</li></ul><hr><p>   <strong>字典的基本单位是键值对</strong></p><hr><h4 id="字典的操作"><a href="#字典的操作" class="headerlink" title="字典的操作:"></a>字典的操作:</h4><p>   <strong>删除</strong>字典里的键值：del 字典名[‘键名’]<br>   给字典里的元素<strong>赋值</strong>: 字典名[‘键’] = 值<br>   <strong>获取字典所有键</strong> : 字典名.keys()<br>   <strong>获取字典的所有值</strong>： 字典名.values()<br>   <strong>获取字典的所有键值对</strong>: 字典名.items()</p><h4 id="列表与字典的异同："><a href="#列表与字典的异同：" class="headerlink" title="列表与字典的异同："></a>列表与字典的异同：</h4><h5 id="异："><a href="#异：" class="headerlink" title="异："></a>异：</h5><ul><li>字典是无序的，而列表是有序的，如下图：<br><img src="https://s1.ax1x.com/2020/03/14/8QhTNn.png" alt="8QhTNn.png"><br><strong>自从Python3.6之后，字典就是有序的啦！</strong></li></ul><h5 id="同："><a href="#同：" class="headerlink" title="同："></a>同：</h5><ul><li>若要修改，都可以通过赋值来进行</li><li>支持任意嵌套</li></ul><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>元组和列表都是序列，提取的方式也是偏移量，也同样支持切片的方式提取</p><p><strong>元组是静态的，长度大小固定，无法增加删减或者改（immutable</strong></p><p>元组里的参数一旦定义便不可变，如图<br><img src="https://s1.ax1x.com/2020/03/14/8Qhb90.png" alt="8Qhb90.png"></p><p>语法：元祖名（元素）</p><p>元组也支持任意嵌套</p><h4 id="常用模块："><a href="#常用模块：" class="headerlink" title="常用模块："></a>常用模块：</h4><p>time<br>引用: import time<br><strong>一般用于休眠，相当于java的sleep，因为功能一致time.sleep(秒)</strong></p><p>random<br>引用 import random<br><strong>一般用于产生随机数，random.randint(a,b)<br>函数返回一个介于a与b之间且包括a,b的值</strong><br><strong>random.randint(list)通过该方法随机从list中抽取一个值，而dict字典则无法随机抽取如图</strong><br><img src="https://s1.ax1x.com/2020/03/14/8Qhq3V.png" alt="8Qhq3V.png"><br><img src="https://s1.ax1x.com/2020/03/14/8QTMdg.png" alt="8QTMdg.png"><br><strong>random.sample(seq, n)需要传递两个参数，第一个参数是一个序列（列表、字符串、元组），第二个参数是随机选取的元素个数,该函数是用于随机从集合当中抽取元素</strong><br><img src="https://s1.ax1x.com/2020/03/14/8QhjuF.png" alt="8QhjuF.png"></p><h4 id="整型-int"><a href="#整型-int" class="headerlink" title="整型(int)"></a>整型(int)</h4><p>python3.x中，<strong>整型(int) 的长度理论上是无限的</strong><br><img src="https://s1.ax1x.com/2020/03/14/8QhvB4.png" alt="8QhvB4.png"></p><p>关于整型呢有几种常用的操作：<br><img src="https://s1.ax1x.com/2020/03/14/8Q4SE9.png" alt="8Q4SE9.png"><br>虽然操作简单但有两个点需要注意：</p><ol><li><strong> 代表着某个数的几次方，比如上图2 </strong> 3=8</li><li>3/1 = 3.0,这里可以看出来，<strong>整型经过除法运算结果变为了浮点数</strong></li></ol><h4 id="关于格式符"><a href="#关于格式符" class="headerlink" title="关于格式符"></a>关于格式符</h4><p>为了更方便地实现不同数据类型的拼接，用【格式符%】%号后面的字母叫做类型码。<br><strong>常见的类型码</strong><br><img src="https://s1.ax1x.com/2020/03/14/8Q4pNR.png" alt="8Q4pNR.png"></p><p>示例如图：<br><img src="https://s1.ax1x.com/2020/03/14/8Q4P9x.png" alt="8Q4P9x.png"></p><p>这两个 是等价的，但是后者明显就方便好多，不论是<br><strong>更详细的示例</strong>：<br><img src="https://s1.ax1x.com/2020/03/14/8Q4i36.png" alt="8Q4i36.png"></p><p><strong>当两种类型码显示的结果都一样时可以任意选用</strong>如图：<br><img src="https://s1.ax1x.com/2020/03/14/8Q4EuD.png" alt="8Q4EuD.png"></p><h4 id="关于变量作用域"><a href="#关于变量作用域" class="headerlink" title="关于变量作用域"></a>关于变量作用域</h4><ol><li>在一个函数内定义的变量仅能在函数内部使用（局部作用域），它们被称作【局部变量】。</li><li>在所有函数之外赋值的变量，可以在程序的任何位置使用（全局作用域），它们叫【全局变量】.<br>关于局部变量和全局变量这点要注意，当局部变量跟全局变量同名时，在局部变量重新赋值并不影响全局变量，如图：<br><img src="https://s1.ax1x.com/2020/03/14/8Q4VDe.png" alt="8Q4VDe.png"><br><img src="https://s1.ax1x.com/2020/03/14/8Q4ZHH.png" alt="8Q4ZHH.png"></li></ol><p><img src="https://s1.ax1x.com/2020/03/14/8Q4nUA.png" alt="8Q4nUA.png"></p><p><strong>若要把局部变量变为全局变量，在局部变量前加global前缀，python不运行同时声明global并赋值，如图</strong><br><img src="https://s1.ax1x.com/2020/03/14/8Q4u4I.png" alt="8Q4u4I.png"></p><h4 id="浅谈全局变量和局部变量"><a href="#浅谈全局变量和局部变量" class="headerlink" title="浅谈全局变量和局部变量"></a>浅谈全局变量和局部变量</h4><p><strong>1.当全局变量没有声明时，在函数内部是不能使用global进行修饰，因为global声明变量是为了使用已存在的全局变量，当全局变量不存在时，global就无法定位全局变量。</strong><br><img src="https://s1.ax1x.com/2020/03/14/8Q4Q8P.png" alt="8Q4Q8P.png"><br><strong>2.当函数内部声明了一个与全局变量同名的局部变量，若需要在声明之前使用全局变量必须用global显示声明，若没声明将会报未声明变量的错</strong><br><img src="https://s1.ax1x.com/2020/03/14/8Q4lgf.png" alt="8Q4lgf.png"><br>正确做法：<br><img src="https://s1.ax1x.com/2020/03/14/8Q41v8.png" alt="8Q41v8.png"></p><p><strong>注意，当在函数内部声明了global使用全局变量的时候，后续的关于该变量同名的操作实际上对该全局变量的重新赋值</strong><br><img src="https://s1.ax1x.com/2020/03/14/8Q48KS.png" alt="8Q48KS.png"></p><h4 id="列表和元组的差异"><a href="#列表和元组的差异" class="headerlink" title="列表和元组的差异"></a>列表和元组的差异</h4><p><strong>存储方式上：元组是静态的，而列表是动态的，所以存储方式肯定有所差异</strong>，如下图：<br><img src="https://s1.ax1x.com/2020/03/14/8QTAJA.png" alt="8QTAJA.png"><br>原因：<br><strong>由于列表是动态的，所以需要存储指针来指向对应元素，列表和元组的存储大小主要是由存储的数据类型来决定的</strong>，如int型，其在内存中占据8个字节，如上图，三个元素就需要两个指针来追踪列表空间使用情况，所以列表比元组多16个字节，当元素个数增多指针的个数也会相应增加。如下图：<br><img src="https://s1.ax1x.com/2020/03/14/8QTCZD.png" alt="8QTCZD.png"></p><p><strong>为了减小每次增加 / 删减操作时空间分配的开销Python 每次分配空间时都会额外多分配一些，这样的机制（over-allocating）保证了其操作的高效性：增加 / 删除的时间复杂度均为 O(1)</strong></p><p><strong>元组因为其长度大小固定，元素不可变，所以其存储空间一旦固定则无法更改。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;列表（list）：&quot;&gt;&lt;a href=&quot;#列表（list）：&quot; class=&quot;headerlink&quot; title=&quot;列表（list）：&quot;&gt;&lt;/a&gt;列表（list）：&lt;/h4&gt;&lt;h5 id=&quot;列表里的类型：&quot;&gt;&lt;a href=&quot;#列表里的类型：&quot; class=&quot;he
      
    
    </summary>
    
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/03/13/hello-world/"/>
    <id>http://yoursite.com/2020/03/13/hello-world/</id>
    <published>2020-03-13T03:25:44.180Z</published>
    <updated>2020-03-13T03:25:44.180Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
